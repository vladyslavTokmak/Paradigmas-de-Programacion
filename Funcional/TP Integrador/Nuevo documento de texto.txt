type Memoria = [Int]
type Acumulador = Int
type Contador = Int
type Etiqueta = String

-- 1.1)
data Procesador = Procesador {
                    memoria :: Memoria,
                    a :: Acumulador,
                    b :: Acumulador,
                    contador :: Contador,
                    etiqueta :: Etiqueta
                    }deriving (Show)

procesador1 = Procesador [1,2,3] 8 6 0 ""

--1.2)
xt8088 = Procesador [] 0 0 0 ""

--2.1)
nop procesador = procesador {contador = contadorMasUno procesador}

--2.2) >(nop.nop.nop) xt8088
--     >Procesador {memoria = [], a = 0, b = 0, contador = 3, etiqueta = ""}
-- Interviene composicon de funciones, que nos permitio aplicar 3 veces el NOP a nuestro procesador.
-- De otra forma, si aplicabamos NOP, Enter, NOP, Enter, NOP, Enter, el contador siempre nos quedaria
-- en 1, xq no guardamos el valor y se lo sumamos, sino que creamos un nuevo contador con el valor 1.
--3.1)
add procesador = modificarAcumuladorA (sumaDeAcumuladores procesador) procesador
swap procesador = procesador {a = b procesador, b = a procesador, contador = contadorMasUno procesador}
lodv valor procesador = procesador {a = valor, contador = contadorMasUno procesador}


--3.2) Implementar el siguiente programa, que permite sumar 10 + 22
--LODV 10   // Cargo el valor 10 en el acumulador
--SWAP      // Cargo el valor 10 en el acumulador B (paso de A a B)
--LODV 22   // Cargo el valor 22 en el acumulador A
--ADD       // Realizo la suma y el resultado queda en el acumulador A

programaQueSuma10Mas20 = add .(lodv 22 . (swap . lodv 10))

-- 3.4)
-- accederAPosicion lista posicion = lista !! posicion
-- accederAMemoria indice procesador = accederAPosicion (memoria procesador) indice

--agregarValorEnPosicion posicion valor lista = (take (posicion+1) lista)++[valor]++(drop (posicion+1) lista)

str posicion valor procesador = procesador{ memoria = agregarValorEnPosicion posicion valor (memoria procesador) } 

-- 4.1)
divv procesador | b procesador == 0 = procesador {etiqueta = "DIVISION BY ZERO"}
                | otherwise = modificarAcumuladorA (divisionDeAcumuladores procesador) procesador
lod addr procesador = procesador {a = accederAPosicion (memoria procesador) addr }
--str addr val procesador = procesador {memoria = accederAPosicion (memoria procesador) addr = val}

-- 4.2) STR  1 2  // Guardo en la posición 1 de memoria el valor 2
--STR  2 0  // Guardo en la posición 2 de memoria el valor 0
--LOD  2    // Cargo en el acumulador A el valor 0 (pos.2)
--SWAP      // Guardo el valor 0 en el acumulador B
--LOD  1    // Cargo en el acumulador A el valor 2 (pos.1)
--DIV       // Intento hacer la división
--  div . (lod 1 . (swap .(lod 2 . (str 2 0 . str 1 2)))) xt8088


--Funciones especiales

sumaDeAcumuladores procesador = a procesador + b procesador
divisionDeAcumuladores procesador = a procesador `div` b procesador
accederAPosicion lista posicion = lista !! posicion
modificarAcumuladorA valorFuncion procesador = procesador {a = valorFuncion, b = 0, contador = contadorMasUno procesador}
contadorMasUno procesador = ((+1).contador) procesador
divisionPorCeroERROR procesador = procesador {etiqueta = "DIVISION BY ZERO"}

agregarValorEnPosicion posicion valor lista = (take (posicion-1) lista)++[valor]++(drop (posicion-1) lista)